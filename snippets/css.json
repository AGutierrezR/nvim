{
  "wrapper css layout": {
    "prefix": "l-wrapper",
    "body": [
      "/**",
      " * WRAPPER",
      " * Sets a max width, adds a consistent gutter and horizontally",
      " * centers the contents",
      " * Info: https://piccalil.li/quick-tip/use-css-clamp-to-create-a-more-flexible-wrapper-utility/",
      " */",
      ".wrapper {",
      "  width: var(--wrapper-width);",
      "  margin-left: auto;",
      "  margin-right: auto;",
      "  padding-left: var(--gutter);",
      "  padding-right: var(--gutter);",
      "  position: relative;",
      "}"
    ],
    "description": "wrapper css layout"
  },
  "cluster css layout": {
    "prefix": "l-cluster",
    "body": [
      "/*",
      "CLUSTER",
      "More info: https://every-layout.dev/layouts/cluster/",
      "A layout that lets you distribute items with consitent",
      "spacing, regardless of their size",
      "",
      "CUSTOM PROPERTIES AND CONFIGURATION",
      "--gutter (var(--space-s-m)): This defines the space",
      "between each item.",
      "",
      "--cluster-horizontal-alignment (flex-start) How items should align",
      "horizontally. Can be any acceptable flexbox aligmnent value.",
      "",
      "--cluster-vertical-alignment How items should align vertically.",
      "Can be any acceptable flexbox alignment value.",
      "*/",
      "",
      ".cluster {",
      "  display: flex;",
      "  flex-wrap: wrap;",
      "  gap: var(--gutter, var(--space-s-l));",
      "  justify-content: var(--cluster-horizontal-alignment, flex-start);",
      "  align-items: var(--cluster-vertical-alignment, center);",
      "}"
    ],
    "description": "cluster css layout"
  },
  "sidebar css layout": {
    "prefix": "l-sidebar",
    "body": [
      "/* ",
      "SIDEBAR",
      "More info: https://every-layout.dev/layouts/sidebar/",
      "A layout that allows you to have a flexible main content area",
      "and a \"fixed\" width sidebar that sits on the left or right.",
      "If there is not enough viewport space to fit both the sidebar",
      "width *and* the main content minimum width, they will stack",
      "on top of each other",
      "",
      "CUSTOM PROPERTIES AND CONFIGURATION",
      "--gutter (var(--space-size-1)): This defines the space",
      "between the sidebar and main content.",
      "",
      "--sidebar-target-width (20rem): How large the sidebar should be",
      "",
      "--sidebar-content-min-width(50%): The minimum size of the main content area",
      "",
      "EXCEPTIONS",
      ".sidebar[data-direction='rtl']: flips the sidebar to be on the right ",
      "*/",
      ".sidebar {",
      "  display: flex;",
      "  flex-wrap: wrap;",
      "  gap: var(--gutter, var(--space-s-l));",
      "}",
      "",
      ".sidebar:not([data-direction]) > :first-child {",
      "  flex-basis: var(--sidebar-target-width, 20rem);",
      "  flex-grow: 1;",
      "}",
      "",
      ".sidebar:not([data-direction]) > :last-child {",
      "  flex-basis: 0;",
      "  flex-grow: 999;",
      "  min-width: var(--sidebar-content-min-width, 50%);",
      "}",
      "",
      "/* ",
      "A flipped version where the sidebar is on the right",
      "*/",
      ".sidebar[data-direction='rtl'] > :last-child {",
      "  flex-basis: var(--sidebar-target-width, 20rem);",
      "  flex-grow: 1;",
      "}",
      "",
      ".sidebar[data-direction='rtl'] > :first-child {",
      "  flex-basis: 0;",
      "  flex-grow: 999;",
      "  min-width: var(--sidebar-content-min-width, 50%);",
      "}"
    ],
    "description": "sidebar css layout"
  },
  "switcher css layout": {
    "prefix": "l-switcher",
    "body": [
      "/*",
      "SWITCHER",
      "More info: https://every-layout.dev/layouts/switcher/",
      "A layout that allows you to lay **2** items next to each other",
      "until there is not enough horizontal space to allow that.",
      "",
      "CUSTOM PROPERTIES AND CONFIGURATION",
      "--gutter (var(--space-size-1)): This defines the space",
      "between each item",
      "",
      "--switcher-target-container-width (40rem): How large the container",
      "needs to be to allow items to sit inline with each other",
      "",
      "--switcher-vertical-alignment How items should align vertically.",
      "Can be any acceptable flexbox alignment value.",
      "*/",
      ".switcher {",
      "  display: flex;",
      "  flex-wrap: wrap;",
      "  gap: var(--gutter, var(--space-s-l));",
      "  align-items: var(--switcher-vertical-alignment, flex-start);",
      "}",
      "",
      ".switcher > * {",
      "  flex-grow: 1;",
      "  flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);",
      "}",
      "",
      "/* Max 2 items,",
      "so we target everything *after* those */",
      ".switcher > :nth-last-child(n + 3),",
      ".switcher > :nth-last-child(n + 3) ~ * {",
      "  flex-basis: 100%;",
      "}"
    ],
    "description": "switcher css layout"
  },
  "repel css layout": {
    "prefix": "l-repel",
    "body": [
      "/*",
      "REPEL",
      "A little layout that pushes items away from each other where",
      "there is space in the viewport and stacks on small viewports",
      "",
      "CUSTOM PROPERTIES AND CONFIGURATION",
      "--gutter (var(--space-s-m)): This defines the space",
      "between each item.",
      "",
      "--repel-vertical-alignment How items should align vertically.",
      "Can be any acceptable flexbox alignment value.",
      "*/",
      ".repel {",
      "  display: flex;",
      "  flex-wrap: wrap;",
      "  justify-content: space-between;",
      "  align-items: var(--repel-vertical-alignment, center);",
      "  gap: var(--gutter, var(--space-s-l));",
      "}",
      "",
      ".repel[data-nowrap] {",
      "  flex-wrap: nowrap;",
      "}"
    ],
    "description": "repel css layout"
  },
  "region css layout": {
    "prefix": "l-region",
    "body": [
      "/* ",
      "REGION UTILITY",
      "Consistent block padding for page sections",
      "*/",
      ".region {",
      "  padding-block: var(--region-space, var(--space-l-xl));",
      "}"
    ],
    "description": "region css layout"
  },
  "auto-grid css layout": {
    "prefix": "l-auto-grid",
    "body": [
      "/* AUTO GRID",
      "Related Every Layout: https://every-layout.dev/layouts/grid/",
      "More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/",
      "A flexible layout that will create an auto-fill grid with",
      "configurable grid item sizes",
      "",
      "CUSTOM PROPERTIES AND CONFIGURATION",
      "--gutter (var(--space-s-m)): This defines the space",
      "between each item.",
      "",
      "--grid-min-item-size (14rem): How large each item should be",
      "ideally, as a minimum.",
      "",
      "--grid-placement (auto-fill): Set either auto-fit or auto-fill",
      "to change how empty grid tracks are handled */",
      ".auto-grid {",
      "  display: grid;",
      "  grid-template-columns: repeat(",
      "    var(--grid-placement, auto-fill),",
      "    minmax(var(--grid-min-item-size, 14rem), 1fr)",
      "  );",
      "  gap: var(--gutter, var(--space-s-l));",
      "}",
      "",
      ".auto-grid[data-fit='auto-fit'] {",
      "  --grid-placement: auto-fit;",
      "}",
      "",
      ".auto-grid[data-rows='masonry'] {",
      "  align-items: start;",
      "  grid-template-rows: masonry;",
      "}"
    ],
    "description": "auto-grid css layout"
  },
  "reel css layout": {
    "prefix": "l-reel",
    "body": [
      "/* ",
      " REEL",
      " A layout that creates a carousel-like element",
      "",
      "",
      " CONFIGURATION",
      " Add an attribute of data-scroll=\"snap\" to the element",
      " to enable scroll snapping",
      "*/",
      ".reel {",
      "  --reel-space: 2rem;",
      "  display: flex;",
      "  height: auto;",
      "  max-width: 100%;",
      "  margin-inline: auto;",
      "",
      "  /* Padding allows child element hover states to show */",
      "  padding: 0.5rem;",
      "  overflow-x: auto;",
      "  -webkit-overflow-scrolling: touch;",
      "}",
      "",
      ".reel > * {",
      "  flex-basis: var(--reel-item-width, calc(33.333% - var(--reel-space)));",
      "  flex-shrink: 0;",
      "}",
      "",
      ".reel > * + * {",
      "  margin-inline-start: var(--reel-space);",
      "}",
      "",
      "/* SCROLL TYPE EXCEPTION",
      "   Sets the reel to snap on each item on scroll */",
      ".reel[data-scroll='snap'] {",
      "  scroll-snap-type: x mandatory;",
      "}",
      "",
      ".reel[data-scroll='snap'] > * {",
      "  scroll-snap-align: start;",
      "}"
    ],
    "description": "reel css layout"
  },
  "flow css layout": {
    "prefix": "l-flow",
    "body": [
      "/* ",
      "FLOW UTILITY",
      "Like the Every Layout stack: https://every-layout.dev/layouts/stack/",
      "Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ ",
      "*/",
      ".flow > * + * {",
      "  margin-top: var(--flow-space, 1em);",
      "}"
    ],
    "description": "flow css layout"
  },
  "center css layout": {
    "prefix": "l-center",
    "body": [
      "/* Centers content with a maximum width and horizontal padding */",
      ".center {",
      "  box-sizing: content-box; ",
      "  max-inline-size: 60ch; ",
      "  margin-inline: auto; ",
      "  padding-inline-start: var(--s1);  ",
      "  padding-inline-end: var(--s1);  ",
      "}"
    ],
    "description": "center css layout"
  },
  "center intrinsic css layout": {
    "prefix": "l-center-intrinsic",
    "body": [
      "/* Same as .center but also uses flexbox to center child elements horizontally */",
      ".center-intrinsic {",
      "  box-sizing: content-box; ",
      "  max-inline-size: 60ch; ",
      "  margin-inline: auto; ",
      "  padding-inline-start: var(--s1);  ",
      "  padding-inline-end: var(--s1);  ",
      "  display: flex; ",
      "  flex-direction: column; ",
      "  align-items: center;",
      "}"
    ],
    "description": "center intrinsic css layout"
  },
  "stack css layout": {
    "prefix": "l-stack",
    "body": [
      ".stack {",
      "  /* ↓ The flex context */",
      "  display: flex;",
      "  flex-direction: column;",
      "  justify-content: flex-start;",
      "}",
      "",
      ".stack > * {",
      "  /* ↓ Any extant vertical margins are removed */",
      "  margin-block: 0;",
      "}",
      "",
      ".stack > * + * {",
      "  /* ↓ Top margin is only applied to successive elements */",
      "  margin-block-start: var(--space, 1.5rem);",
      "}"
    ],
    "description": "stack css layout"
  },
  "stack nested css layout": {
    "prefix": "l-stack-nested",
    "body": [
      "[class^='stack'] {",
      "  /* ↓ The flex context */",
      "  display: flex;",
      "  flex-direction: column;",
      "  justify-content: flex-start;",
      "}",
      "",
      "[class^='stack'] > * {",
      "  /* ↓ Any extant vertical margins are removed */",
      "  margin-block: 0;",
      "}",
      "",
      ".stack-large > * + * {",
      "  margin-block-start: 3rem;",
      "}",
      "",
      ".stack-small > * + * {",
      "  margin-block-end: 0.5rem;",
      "}"
    ],
    "description": "stack nested css layout"
  },
  "stack exception css layout": {
    "prefix": "l-stack-exception",
    "body": [
      ".stack-exception,",
      ".stack-exception + * {",
      "  --space: 3rem;",
      "}"
    ],
    "description": "stack exception css layout"
  },
  "stack split css layout": {
    "prefix": "l-stack-split",
    "body": [
      "/* This will split the stack at the 2nd child */",
      ".stack > :nth-child(2) {",
      "  margin-block-end: auto;",
      "}"
    ],
    "description": "stack split css layout"
  },
  "cover css layout": {
    "prefix": "l-cover",
    "body": [
      ".cover {",
      "  display: flex;",
      "  flex-direction: column;",
      "  min-block-size: 100vh; /* Covers min height (it must always be defined) */",
      "  padding: 1rem; /* Padding around the cover */",
      "}",
      "",
      "/* Spacing between elements inside the cover */",
      ".cover > * {",
      "  margin-block: 1rem;",
      "}",
      "",
      "/*",
      " * Remove margin from first and last child elements",
      " * inside the cover, except for h1 (main) elements.",
      " * change the h1 ",
      " */",
      ".cover > :first-child:not(h1) {",
      "  margin-block-start: 0;",
      "}",
      "",
      ".cover > :last-child:not(h1) {",
      "  margin-block-end: 0;",
      "}",
      "",
      "/*",
      " * Center the main element vertically",
      " * change if there are other elements",
      " */",
      ".cover > h1 {",
      "  margin-block: auto;",
      "}"
    ],
    "description": "cover css layout"
  }
}
